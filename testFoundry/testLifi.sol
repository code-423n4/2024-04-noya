// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.20;

import "@openzeppelin/contracts-5.0/utils/Strings.sol";
import "@openzeppelin/contracts-5.0/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts-5.0/token/ERC20/IERC20.sol";

import "contracts/helpers/BaseConnector.sol";
import "./utils/testStarter.sol";
import "./utils/resources/MainnetAddresses.sol";
import "./utils/mocks/lifiDiamondMock.sol";
import "./utils/mocks/IDiamondCut.sol";
import "./utils/mocks/ConnectorMock.sol";

contract testLifi is testStarter, MainnetAddresses {
    // using SafeERC20 for IERC20;

    ConnectorMock connector;

    address lifiOwner = 0x37347dD595C49212C5FC2D95EA10d1085896f51E;

    function setUp() public {
        console.log("----------- Initialization -----------");
        // --------------------------------- set env --------------------------------
        uint256 fork = vm.createFork(RPC_URL, 19_547_832);
        vm.selectFork(fork);

        console.log("Test timestamp: %s", block.timestamp);

        // --------------------------------- deploy the contracts ---------------------------------
        vm.startPrank(owner);

        deployEverythingNormal(USDC);

        // --------------------------------- init connector ---------------------------------
        connector = new ConnectorMock();

        console.log("connector deployed: %s", address(connector));
        // ------------------- add connector to registry -------------------
        addConnectorToRegistry(vaultId, address(connector));
        // ------------------- addTokensToSupplyOrBorrow -------------------
        addTrustedTokens(vaultId, address(accountingManager), USDC);
        addTrustedTokens(vaultId, address(accountingManager), DAI);
        addTrustedTokens(vaultId, address(accountingManager), WETH);
        addTrustedTokens(vaultId, address(accountingManager), WBTC);

        addTokenToChainlinkOracle(address(USDC), address(840), address(USDC_USD_FEED));
        addTokenToNoyaOracle(address(USDC), address(chainlinkOracle));
        addTrustedTokens(vaultId, address(accountingManager), WBTC);

        addTokenToChainlinkOracle(address(USDC), address(0), address(USDC_ETH_FEED));
        addTokenToNoyaOracle(address(0), address(chainlinkOracle));

        addTokenToChainlinkOracle(address(WETH), address(840), address(WETH_USD_FEED));
        addTokenToNoyaOracle(address(WETH), address(chainlinkOracle));

        addTokenToChainlinkOracle(address(0), address(840), address(WETH_USD_FEED));
        addTokenToChainlinkOracle(address(DAI), address(840), address(DAI_USD_FEED));
        addTokenToNoyaOracle(address(DAI), address(chainlinkOracle));

        addTokenToChainlinkOracle(address(WBTC), address(840), address(WBTC_USD_FEED));
        addTokenToNoyaOracle(address(WBTC), address(chainlinkOracle));

        addRoutesToNoyaOracle(address(DAI), address(USDC), address(840));
        addRoutesToNoyaOracle(address(WETH), address(USDC), address(840));
        addRoutesToNoyaOracle(address(WBTC), address(USDC), address(840));
        addRoutesToNoyaOracle(address(WBTC), address(0), address(840));

        console.log("Tokens added to registry");
        registry.addTrustedPosition(vaultId, 0, address(accountingManager), false, false, abi.encode(USDC), "");
        registry.addTrustedPosition(vaultId, 0, address(accountingManager), false, false, abi.encode(WETH), "");
        console.log("Positions added to registry");
        vm.stopPrank();
    }

    function testBridgeImplementation() public {
        vm.startPrank(owner);
        uint256 _amount = 10_000_000;

        lifiDiamondMock diamondMock = new lifiDiamondMock();

        lifiImplementation = new LifiImplementation(address(swapHandler), address(diamondMock));

        RouteData[] memory _routeData = new RouteData[](2);
        _routeData[0].route = address(lifiImplementation);
        _routeData[0].isEnabled = true;
        _routeData[0].isBridge = false;

        _routeData[1].route = address(lifiImplementation);
        _routeData[1].isEnabled = true;
        _routeData[1].isBridge = true;
        swapHandler.addRoutes(_routeData);

        bytes memory data = abi.encodeWithSelector(
            diamondMock.executeBridge.selector,
            "bridge",
            WBTC,
            address(0x1a83c6Cb0bF880F81E5b5e536DC2A3da33a77830),
            _amount,
            10
        );

        BridgeRequest memory bridgeRequest = BridgeRequest(
            10,
            address(0x1a83c6Cb0bF880F81E5b5e536DC2A3da33a77830),
            0,
            _amount,
            WBTC,
            address(0x1a83c6Cb0bF880F81E5b5e536DC2A3da33a77830),
            data
        );

        _dealERC20(WBTC, address(connector), _amount);

        lifiImplementation.addBridgeBlacklist("bridge", true);
        lifiImplementation.addChain(10, true);

        vm.expectRevert();
        connector.bridge(address(swapHandler), bridgeRequest);

        bridgeRequest.routeId = 3;

        connector.bridge(address(swapHandler), bridgeRequest);
    }

    function testSwapIntoEth() public {
        vm.startPrank(owner);

        // 0x4630a0d8175ea60fd7ce304255f02d257bc0ddba930ddddb9a601f91c85c24989c69e10b00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001a83c6Cb0bF880F81E5b5e536DC2A3da33a778300000000000000000000000000000000000000000000000001b5ba67e3045ea48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000001b5ba67e3045ea480000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000014200012c0000f0513202704ed8b5a8e817f354d59432e115e0d80533942260fac5e5542a773aa44fbcfedf7c193bc2c599004475d39ecb000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000276a40000000000000000000000000000000000000000000000001b3874c5983b45ba00000000000000000000000000000000000000000000000000000000660ecf5d4101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a9605822e9b3012000000000000000000000000000000000000000000000000
        uint256 _amount = 10_000_000;
        _dealERC20(WBTC, address(connector), _amount);
        bytes memory _data =
            hex"4630a0d8175ea60fd7ce304255f02d257bc0ddba930ddddb9a601f91c85c24989c69e10b00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001a83c6Cb0bF880F81E5b5e536DC2A3da33a778300000000000000000000000000000000000000000000000001b5ba67e3045ea48000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002e812aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000001231deb6f5749ef6ce6943a275a1d3e7486f4eae00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000001b5ba67e3045ea480000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000014200012c0000f0513202704ed8b5a8e817f354d59432e115e0d80533942260fac5e5542a773aa44fbcfedf7c193bc2c599004475d39ecb000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000276a40000000000000000000000000000000000000000000000001b3874c5983b45ba00000000000000000000000000000000000000000000000000000000660ecf5d4101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a9605822e9b3012000000000000000000000000000000000000000000000000";

        uint256[] memory routeIds = new uint256[](1);
        connector.swap(address(swapHandler), WBTC, address(0), _amount, _data, 0);
    }
}
