// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.20;

import "@openzeppelin/contracts-5.0/utils/Strings.sol";
import "@openzeppelin/contracts-5.0/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts-5.0/token/ERC20/IERC20.sol";

import "contracts/helpers/BaseConnector.sol";
import "./utils/testStarter.sol";
import "./utils/resources/OptimismAddresses.sol";
import "./utils/mocks/lifiDiamondMock.sol";
import "./utils/mocks/IDiamondCut.sol";

contract testSwapHandler is testStarter, OptimismAddresses {
    // using SafeERC20 for IERC20;

    BaseConnector connector;

    address lifiOwner = 0x37347dD595C49212C5FC2D95EA10d1085896f51E;

    function setUp() public {
        console.log("----------- Initialization -----------");
        // --------------------------------- set env --------------------------------
        uint256 fork = vm.createFork(RPC_URL, 117_307_857);
        vm.selectFork(fork);

        console.log("Test timestamp: %s", block.timestamp);

        // --------------------------------- deploy the contracts ---------------------------------
        vm.startPrank(owner);

        deployEverythingNormal(USDC);

        // --------------------------------- init connector ---------------------------------
        connector = new BaseConnector(BaseConnectorCP(registry, 0, swapHandler, noyaOracle));

        console.log("connector deployed: %s", address(connector));
        // ------------------- add connector to registry -------------------
        addConnectorToRegistry(vaultId, address(connector));
        // ------------------- addTokensToSupplyOrBorrow -------------------
        addTrustedTokens(vaultId, address(accountingManager), USDC);
        addTrustedTokens(vaultId, address(accountingManager), DAI);
        addTrustedTokens(vaultId, address(accountingManager), WETH);

        addTokenToChainlinkOracle(address(USDC), address(840), address(USDC_USD_FEED));
        addTokenToNoyaOracle(address(USDC), address(chainlinkOracle));

        addTokenToChainlinkOracle(address(WETH), address(840), address(ETH_USD_FEED));
        addTokenToNoyaOracle(address(WETH), address(chainlinkOracle));

        addTokenToChainlinkOracle(address(DAI), address(840), address(DAI_USD_FEED));
        addTokenToNoyaOracle(address(DAI), address(chainlinkOracle));

        addRoutesToNoyaOracle(address(DAI), address(USDC), address(840));
        addRoutesToNoyaOracle(address(WETH), address(USDC), address(840));

        console.log("Tokens added to registry");
        registry.addTrustedPosition(vaultId, 0, address(accountingManager), false, false, abi.encode(USDC), "");
        registry.addTrustedPosition(vaultId, 0, address(accountingManager), false, false, abi.encode(WETH), "");
        console.log("Positions added to registry");
        vm.stopPrank();
    }

    function testSetterFunctions() public {
        console.log("-----------Setter functions in base connector--------------");

        uint256 _amount = 10 * 1e6;
        _dealWhale(baseToken, address(connector), USDC_Whale, _amount);
        vm.startPrank(owner);

        swapHandler.setValueOracle(address(noyaOracle));

        swapHandler.setGeneralSlippageTolerance(1000);
        swapHandler.setSlippageTolerance(USDC, WETH, 10_000);

        bytes memory _data =
            hex"4630a0d8a6415413036551ad38d46771c2f8d48ccc78b350b59ef68ffae5280615bfe29b00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001a83c6Cb0bF880F81E5b5e536DC2A3da33a778300000000000000000000000000000000000000000000000000008c40ad08baf93000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8e449022e00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000008c40ad08baf9300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d28f71e383e93c570d3edfe82ebbceb35ec6c41280000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c02e9b3012000000000000000000000000000000000000000000000000";

        address[] memory tokensIn = new address[](1);
        address[] memory tokensOut = new address[](1);
        uint256[] memory amountsIn = new uint256[](1);
        bytes[] memory swapData = new bytes[](1);
        uint256[] memory routeIds = new uint256[](1);

        tokensIn[0] = USDC;
        tokensOut[0] = WETH;
        amountsIn[0] = _amount;
        routeIds[0] = 1;
        swapData[0] = _data;
        vm.expectRevert();
        connector.swapHoldings(tokensIn, tokensOut, amountsIn, swapData, routeIds);

        routeIds[0] = 0;
        connector.swapHoldings(tokensIn, tokensOut, amountsIn, swapData, routeIds); // // Covered coverage bug number 72,75

        vm.expectRevert();
        swapHandler.verifyRoute(0, address(0));

        swapHandler.setEnableRoute(0, true);
    }

    function testVerifySwapData() public {
        uint256 _amount = 10 * 1e6;
        _dealWhale(baseToken, address(connector), USDC_Whale, _amount);
        vm.startPrank(owner);

        bytes memory _data =
            hex"4630a0d8a6415413036551ad38d46771c2f8d48ccc78b350b59ef68ffae5280615bfe29b00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001a83c6Cb0bF880F81E5b5e536DC2A3da33a778300000000000000000000000000000000000000000000000000008c40ad08baf93000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8e449022e00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000008c40ad08baf9300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d28f71e383e93c570d3edfe82ebbceb35ec6c41280000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c02e9b3012000000000000000000000000000000000000000000000000";

        SwapRequest memory swapRequest = SwapRequest(bob, 0, _amount, USDC, WETH, _data, false, 0);

        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        swapRequest.from = address(0x1a83c6Cb0bF880F81E5b5e536DC2A3da33a77830);
        swapRequest.inputToken = USDT;

        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        swapRequest.inputToken = USDC;
        swapRequest.outputToken = USDT;

        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        swapRequest.outputToken = WETH;
        swapRequest.amount = 2 * _amount;

        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        swapRequest.amount = _amount;
        swapRequest.minAmount = 20e18;

        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        swapRequest.minAmount = 0;
        swapRequest.data =
            hex"4620a0d8a6415413036551ad38d46771c2f8d48ccc78b350b59ef68ffae5280615bfe29b00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001a83c6Cb0bF880F81E5b5e536DC2A3da33a778300000000000000000000000000000000000000000000000000008c40ad08baf93000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783030303030303030303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8e449022e00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000008c40ad08baf9300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d28f71e383e93c570d3edfe82ebbceb35ec6c41280000000000000000000000095d9d28606ee55de7667f0f176ebfc3215cfd9c02e9b3012000000000000000000000000000000000000000000000000";
        vm.expectRevert();
        lifiImplementation.verifySwapData(swapRequest);

        vm.stopPrank();
    }

    function testRescue() public {
        uint256 _amount = 10 * 1e6;
        _dealWhale(baseToken, address(lifiImplementation), USDC_Whale, _amount);
        _dealEth(address(lifiImplementation), 2 * _amount);
        vm.startPrank(owner);
        lifiImplementation.rescueFunds(address(USDC), owner, _amount);
        lifiImplementation.rescueFunds(address(0), owner, _amount);
        vm.expectRevert();
        lifiImplementation.rescueFunds(address(0), address(accountingManager), _amount);
    }

    function testBridgeData() public {
        vm.startPrank(owner);

        bytes memory data =
            hex"0e1eace700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200a257ba8fe59026a2ee42388ed51827f4d9fb754f29e1999735ca7fa909196dc9000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1000000000000000000000000b54c2435dc58fd6f172becee6b2f95b9423f9e790000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008737461726761746500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086c6966692d6170690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000089879476191628000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f480de4814ed6000000000000000000000000b54c2435dc58fd6f172becee6b2f95b9423f9e79000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000014b54c2435dc58fd6f172becee6b2f95b9423f9e790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        BridgeRequest memory bridgeRequest = BridgeRequest(
            1,
            address(0xB54c2435Dc58Fd6F172BecEe6B2F95b9423f9E79),
            0,
            10e18,
            DAI,
            address(0xB54c2435Dc58Fd6F172BecEe6B2F95b9423f9E79),
            data
        );

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        lifiImplementation.addBridgeBlacklist("stargate", true);

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        lifiImplementation.addChain(1, true);
        lifiImplementation.addChain(42_161, true);
        bridgeRequest.inputToken = USDC;

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        bridgeRequest.inputToken = DAI;
        bridgeRequest.amount = 5e18;

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        bridgeRequest.amount = 10e18;
        bridgeRequest.destChainId = 42_161;

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        bridgeRequest.destChainId = 1;
        bridgeRequest.receiverAddress = address(0x1a83c6Cb0bF880F81E5b5e536DC2A3da33a77830);

        vm.expectRevert();
        lifiImplementation.verifyBridgeData(bridgeRequest);

        bridgeRequest.receiverAddress = address(0xB54c2435Dc58Fd6F172BecEe6B2F95b9423f9E79);

        lifiImplementation.verifyBridgeData(bridgeRequest);
    }
}
